== Repository Locations ==
The following binary repository URLs match up with the given Neuvoo profile:
* http://neuvoo.org/neuvoo/packages/armv7a/beagle/: neuvoo/images/0.3.0/beagle
* http://neuvoo.org/neuvoo/packages/armv7a/touchbook/: neuvoo/images/0.3.0/touchbook

These repositories will be kept up-to-date as often as possible, and will continue to update 0.3.0 and later installations of Neuvoo for the foreseeable future.

== Using the Repositories ==
Add these to your /etc/make.conf file, replacing <url> with a URL from the list above:
{{File|/etc/make.conf|<pre>
PORTAGE_BINHOST="<url>"
USE="${USE} bindist"
</pre>}}

Whenever you update, always run:
{{Command|<nowiki>emerge -GuDNv world system</nowiki>}}
{{Warning|It's extremely important all packages get updated at once, since certain upgrades, such as libpng or gcc, will break other packages. Portage should be tracking 
these breaks so the packages that fix the breaks get pulled automatically, but it doesn't... [https://bugs.gentoo.org/327809 yet]. In the meantime, be sure to follow the 
update tip given as closely as possible so all packages are updated at once and breaks are avoided!}}

To view a list of packages supported by the binhost, add .world to the end of the PORTAGE_BINHOST URL and visit that in your browser. (For example, 
http://neuvoo.org/neuvoo/packages/armv7a/beagle/.world)

=== Installing and Updating Masked Packages ===
If a packages refuses to install or update because a package is keyworded, or there are blocks, it is likely your /etc/portage directory is missing a new entry we had to 
add to keep the updates rolling. We had to add an entry to our own /etc/portage so this package would build properly. You can see our /etc/portage directory by adding 
".portage" to the end of the PORTAGE_BINHOST URL, and visit that in your browser. (For example, http://neuvoo.org/neuvoo/packages/armv7a/beagle/.portage)

In this URL, under each directory, you'll find a listing of files.
* The "base" file contains keywords to unmask updates for a default Neuvoo installation. It's perfectly safe to download this into the corresponding /etc/portage 
directory.
* All the other files are named after the extra optional package that is supported by this repository but needed extra keywords to install correctly. If you have one of 
these packages in your /var/lib/portage/world set, or are about to install that package, you should keep an up-to-date copy of this keywords file in the corresponding 
/etc/portage directory.

=== "Use 'emerge @preserved-rebuild' to rebuild packages using these libraries" ===
Do what it says, but do it with -G, like this:
{{Command|<nowiki>emerge @preserved-rebuild</nowiki>}}
If you are seeing this message in the first place, it's likely because we've either forgotten to rebuild the binaries, or there are binary packages already available 
that weren't updated because they're keyworded. If the latter is the case, you will be told a package is masked. You will need to unmask those packages to get rid of the 
'@preserved-rebuild' message. (See [[#Masked Packages]].)

=== For Everything Else, There's... ===
...bug reports. Please feel free to [http://neuvoo.org/bugs/ file a bug report] if you think the binary repository is broken!

== Package Requests ==
Add your request by filing a bug report at http://neuvoo.org/bugs/. When it asks for a category, select "binary request". Be sure to specify the full package atom 
(category/packagename-version), and USE flags you're looking for. The USE flags you request may or may not be honored depending on their repository-wide impact.

== Neuvoo Developers ==
The package repositories require an unusually strict setup in order to maintain stability and consistency. Written below are instructions about how this repo is best 
maintained. For basic usage of farmerge, see [[Farmerge]].

=== Farmerge Etiquette ===
A lot of the same standards for building a Neuvoo release apply here. We want everything to be as stable, clean, and transparent as possible.

* Keep /etc/portage/ modifications to a minimum! Remember that whatever you do in /etc/portage/ directly affects the users of the binary repo. When unmasking is 
involved, users will have to discover and perform the same edits you did to get that binary to emerge.
* Never edit anything in /etc/ that is not absolutely necessary for the node to function. Always make edits that either do not affect the binary repository. Exceptions 
must be discussed first.
* Similarly, Never edit /etc/make.conf. The make.conf provided matches the one the repo users have, and must remain that way. Use farmerge to configure portage behavior, 
or file a bug report if farmerge doesn't provide the customizations needed.
* Use the farmerge shell with care. You are given direct access to the binary node through this function. You could break the repository.

=== Configuring Portage ===
Because ARM stable is barely maintained, we'll always be using some unstable versions. This means there will be errors as portage tries to update unstable packages. 
Another reason you might want to configure portage is to mask a package, or specify USE flags on a particular package.

Launch into a farmerge shell:
{{Command|<nowiki>./farmerge --device <device> -- emerge --emerge-action shell</nowiki>}}
{{Note|Like most farmerge operations, the shell action locks the binary repo so no other nodes are able to work while you have access. Keep the shell open only as long 
as you need it.}}

Some notes about this shell:
* Currently, /etc/portage/ and /var/lib/portage/world are synced across all farmerge nodes. Changes will be uploaded to the repository when you exit. Always make changes 
to these files from within the shell.
* Emerging packages by hand in this shell is discouraged! However, sometimes this is necessary, such as for 
[http://blog.flameeyes.eu/2010/06/29/stable-users-libpng-update libpng updates]. If you emerge a package that is for users (libpng), not for the maintenance of the 
repository (autounmask), use the '-b' option to generate a binary package, and run 'revdep-rebuild' before you exit.

=== Workflow ===
Given the information above, here's how best to complete some common tasks with farmerge for Neuvoo:

==== Adding Packages, or Updating World ====
If you are updating world, simply replace mentions of a package with "world" in the following instructions.

Try to install or update the package:
{{Command|<nowiki>./farmerge --device <device> -- emerge --cpv <package></nowiki>}}

If you get any warnings about masked packages, you can address them by launching into a shell:
{{Command|<nowiki>./farmerge --device <device> -- emerge --emerge-action shell</nowiki>}}

If you are about to keyword a package, or edit its USE flags, follow these basic steps:
# Seriously consider whether this package is worth it. If it's package.mask'ed, please do your homework and make sure you're not about to let hell break loose!
# When considering which version to keyword, prefer the oldest first. Verify that the version installed isn't too old to introduce new bugs or package dependency issues.
## Exception: if there are no stable versions, and there is an ~arm keyword, pick the oldest with an ~arm keyword.
# Find the place where that package is mentioned, and update those mentions.
# If the package has never been mentioned before, use the output of "emerge -tuDNpv world" to find out what package is the root cause. If it is a package in a default 
Neuvoo install, place the keyword or USE flag in the "base" file. If the package is an extra optional package, place the keyword or USE flag in a file with the package's 
name.

Here is a real-world example: chromium-6 was updated, and the old chromium-6 was dropped, forcing us to bump chromium's package.keyword file as well. However, more 
recent chromium-6 builds require GNOME 2.28 and CUPS 1.44, both which were keyworded on ARM at the time of this writing. Since these are not lightweight dependencies, it 
is time to reconsider the chromium-6 keyword. Following the first step above, we determined that, yes, chromium is worth being unmasked. Next, we looked at the available 
versions. We saw that an older chromium-5 is available, and since chromium-5 is considered stable on most systems, and was not depended by any other packages, that 
version was selected instead, according to the second step. Because chromium is installed by default in Neuvoo, all these edits went into the "base" files.

==== Syncing Multiple Device Repositories ====
These commands show what's different between device repositories:
{{Command|<nowiki>diff -ru touchbook/etc/portage beagle/etc/portage</nowiki>}}
{{Command|<nowiki>diff -ru touchbook/var/lib/portage/world beagle/var/lib/portage/world</nowiki>}}

When you want to copy data into another, you must first launch a farmerge shell for the device you're about to copy into. For example, say synergy is added for touchbook 
in its world file, but not in beagle's. Before adding it to beagle's world file, launch a beagle farmerge shell, and then make edits. (The important part is that the 
shell is open. You can make edits from wherever shell you like once it is.)

When you're done, exit the shell, and your changes will sync back up. These changes will take effect in the next world update.

==== --depclean ====
TODO.

Until we figure this one out, it's best to just wait for a new release, and then replace the old binary repositories with the new ones generated by metro.

==== Emerge failed because of a bug in a package. What now? ====
File a bug report and mask the specific package in its own file. Here's an example of a useful package.mask entry with a helpful file-name:
{{File|etc/portage/package.mask/bug-12345-package|<pre>
# http://bugs.gentoo.org/12345
=category/package-version
</pre>}}
Here's an example of an obscure package.mask entry:
{{File|etc/portage/package.mask/configure-fails|<pre>
# buggy :(
=category/package-version
</pre>}}

Note the following guidelines:
* One file per package. Multiple versions are allowed in a file if they apply to the same bug and package.
* Specific package versions that are failing. If no versions are working, mask each and every version! There may come a day when one of the versions work fine, so it's 
worth letting portage crash each time an upgrade comes around just for testing purposes.
* A comment providing a pointer to the exact bug report location
* An easily scanned, human-readable, unique file-name.
