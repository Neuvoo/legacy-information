Icecream provides a really handy way of compiling software faster on weak processors. It basically offloads most of the compilation to other systems on the same network. 
Icecream will even cooperate with ccache, making sure that the savings gained from ccache are not lost.

Its main advantage over distcc is simplicity. Unconfirmed reports state that icecream is also faster than distcc.

In this HOWTO, we are going to set up icecream on all participating systems, and optionally configure Gentoo portage to use icecream.

== Prerequisites ==
* Fluent use of a Linux terminal is likely necessary.
* You'll need at least two systems. The more the merrier!
* Every participating system ought to have icecream installed. This probably means you'll need Linux.
* You'll need a cross-compiler. If you don't want to have to do some digging and script debugging, you probably ought to stick to crossdev. If you have not yet built a 
cross-compiler, follow the instructions [[Hand-craft an Image/Installing Crossdev Tools|here]]. If you are using a non-Gentoo system, you can build one by hand using 
[http://en.opensuse.org/Icecream#Cross-Compiling_using_icecream icecream's documentation].
* Every participating system needs to be on the same network. Everyone must be able to connect to the other to properly distribute jobs. If you're using a USB network 
for one of your systems, and you would like to make it accessible to more than just the host PC in the main network, consider [[USB (Networking)#Bridging|bridging]] your 
two networks.

== Installation ==
Installation of icecream will not be covered here. In Gentoo, it is called "icecream". Other distributions should have the same naming scheme. See the icecream's 
[http://en.opensuse.org/Icecream#Installation homepage] for more information.

== Figuring out Environments ==
A little background information first:
* A native compiler both builds for a system ''and'' runs on that same system.
* A cross-compiler builds for a system but runs on a different system.

The idea is to build whatever environments are needed to build for a "needy" system. Let's say you're building for an armv7a processor (like us). Everyone who will build 
for armv7a needs to have an environment they can use to build armv7a binaries. If you have an x86 system, you need an x86 compiler that builds armv7a binaries.
{{Note|All that matters here is the compiler architecture (x86/amd64/etc). CFLAGs will be passed as arguments to icecc later during compile time.}}

Let's look at that bullet list again with these specific architectures in mind:
* A native armv7a compiler both builds for armv7a systems and runs on the armv7a system.
* An armv7a cross-compiler builds for an armv7a system but runs on an x86/amd64/<your arch here> system.

So what environments do you need? Let's say you have three systems: armv7a, x86, and amd64. Your weak little 500MHz armv7a processor could use some help, so you decide 
to set up icecream. All systems will compile for the armv7a. This means you'll want a native compiler (builds armv7a on armv7a), and two cross-compilers (builds armv7a 
on x86, and builds armv7a on amd64).

This HOWTO assumes you've already built the necessary cross-compilers on each machine that needs a cross-compiler. See [[Hand-craft an Image/Installing Crossdev 
Tools|this HOWTO]] for information on building a cross-compiler.

== Creating Icecream Environments ==

On every system that has a compiler you need, build an environment as follows:
{{Command|<nowiki>CHOST=<this system's toolchain> icecream-create-env <target system toolchain></nowiki>}}

Using our previous examples, we'd run the following three commands on each system. Note that the first one is a native environment, since it runs on the same system it's 
building for, while the other two are cross-compiler environments.
{{Command|<nowiki>CHOST=armv7a-unknown-linux-gnueabi icecream-create-env armv7a-unknown-linux-gnueabi # executed on the armv7a system</nowiki>}}
{{Command|<nowiki>CHOST=x86_64-pc-linux-gnu icecream-create-env armv7a-unknown-linux-gnueabi # executed on the amd64 system</nowiki>}}
{{Command|<nowiki>CHOST=i686-pc-linux-gnu icecream-create-env armv7a-unknown-linux-gnueabi # executed on the x86 system</nowiki>}}
{{Warning|The last two commands that build cross-compiler environments will give you trouble when icecc-create-env tries to test the environment. Use the following patch 
to fix a small bug in the icecc-create-env code:}}
{{File|icecc-create-env.patch|<pre>--- /usr/lib/icecc/icecc-create-env	2010-01-08 18:17:25.573253938 +0000
+++ /usr/lib/icecc/icecc-create-env	2010-01-08 18:17:16.255224967 +0000
@@ -97,7 +97,7 @@
 
 add_file $added_gcc /usr/bin/gcc
 add_file $added_gxx /usr/bin/g++
-add_file /usr/bin/as
+add_file `$added_gcc -print-prog-name=as` /usr/bin/as
 
 if test "$is_darwin" = 1; then
     # add dynamic linker</pre>}}

Icecream will create files with random hashes for names. You'll have to move these to every "needy" system that will need help (but only those computers). In our case, 
that's the weak armv7a. We use /var/icecream as a resting place for these files. We also renamed them to "<system to run on>.tar.bz2" or "<system to compile 
for>_native.tar.bz2". In our examples, this means:
* We renamed the file generated by "CHOST=armv7a-linux-unknown-gnueabi icecream-create-env armv7a-unknown-linux-gnueabi" to "armv7a-unknown-linux-gnueabi_native.tar.bz2"
* We renamed the generated by "CHOST=x86_64-pc-linux-gnu icecream-create-env armv7a-unknown-linux-gnueabi" to "x86_64-pc-linux-gnu.tar.bz2"
* We renamed the generated by "CHOST=i686-pc-linux-gnu icecream-create-env armv7a-unknown-linux-gnueabi" to "i686-pc-linux-gnu.tar.bz2"
The name of the tarball does nothing. The only reason we stress its importance is because the more systems you introduce, the more confusing it can become to track on 
which tarball does what.

== Configuring Icecream ==

=== Icecream Settings ===
Locate the icecream configuration file. On Gentoo systems, the icecream configuration is stored in /etc/conf.d/icecream.

Make the following changes on all systems:
* ICECREAM_NETNAME and ICECREAM_SCHEDULER_HOST should be blank. Setting this has caused more problems than it has solved, and icecream does a good job of auto-detecting 
who to talk to.

On any needy system, consider set the following (but only if you really would rather not it be used for compiling):
* ICECREAM_ALLOW_REMOTE to no

On all other systems, set the following:
* ICECREAM_ALLOW_REMOTE to yes

Now you need to pick a system as the scheduler. This system needs to be on for this to work. Otherwise, icecream will default to local compiling only. On that system, 
set the following:
* ICECREAM_RUN_SCHEDULER to yes

On all other "node" system, set the following:
* ICECREAM_RUN_SCHEDULER to no

The rest of the options can be tweaked to whatever you choose.

=== Icecream Environments ===
Icecream needs the ICECC_VERSION set in the environment. Gentoo systems have a handy /etc/env.d/ directory. Within that folder we added to an 01icecream file. Everyone 
else might consider appending to /etc/profile, or whatever other file or directory your distribution provides.

This configuration only occurs on needy systems, because only needy systems will have the environment tarballs. (If you copied your environment tarballs to every 
machine, you aren't paying attention. :) This variable, ICECC_VERSION, uses the following syntax:
<pre>ICECC_VERSION="/path/to/native-environment.tar.gz,<alternative arch>:/path/to/cross-compiler-for-alternative-arch.tar.gz,..."</pre>
This variable has one native environment, and then all the others are cross-compile environments which are defined by simply typing one or more "arch:path" separated by 
commas. Here is an example:
<pre>ICECC_VERSION="/var/icecream/armv7a-unknown-linux-gnueabi_native.tar.gz,x86_64:/var/icecream/x86_64-pc-linux-gnu.tar.bz2"</pre>
You can guess this is for an armv7a system, because the first path is the armv7a environment tarball. The second path is for amd64 systems, and points to a 
cross-compiler environment which runs on amd64 systems but compiles for armv7a.
{{Note|If you don't have any cross-compilers, just leave everything after the first comma out. In other words, just write in the native environment tarball path into 
that variable.}}

So, once you decide what your ICECC_VERSION should be, put it in the environment file on the "needy" systems. Again, they should also have the corresponding tarballs. On 
Gentoo systems, execute {{Command|env-update}} to "publish" the changes. Terminals will have to be reloaded in order to get the new ICECC_VERSION variable.

{{Note|<nowiki>You can also put ICECC_DEBUG="debug" in the environment file if you want icecc to print out debug information when it is called up to compile.</nowiki>}}

== Configure Portage ==
On all systems, edit make.conf, and set the following:
{{File|/etc/make.conf|<pre>PREROOTPATH="/usr/lib/ccache/bin:/usr/lib/icecc/bin:$PREROOTPATH"</pre>}}
{{Note|We highly recommend you install ccache if you have not already. Leaving the ccache paths in the configurations will not harm anything if ccache is not 
installed.}}

Consider setting -j in MAKEOPTS to a very high count, such as 10. The amount of jobs each system will complete simultaneously is now determined by both by the total 
ICECREAM_MAX_JOBS on all systems, or -j, whichever is lower. The higher the -j, the merrier, generally. {{Warning|If icecream fails to connect to the scheduler, the 
ICECREAM_MAX_JOBS variable will no longer determine the maximum jobs. Check the iceccd logs on the needy systems to be sure the daemons have connected before you 
slaughter them with a high -j count.}}

== Configure Others ==
All you have to do is inject "/usr/lib/ccache/bin:/usr/lib/icecc/bin" into $PATH before the real gcc binaries, so icecream's own gcc gets executed, like so:
{{Command|<nowiki>export PATH="/usr/lib/ccache/bin:/usr/lib/icecc/bin:$PATH"</nowiki>}}
Non-Gentoo systems may not have such a convenient /usr/lib/icecc/bin directory. If one doesn't exist, consider creating /usr/lib/icecc/bin and symlinking c++, cc, g++, 
gcc, <toolchain>-c++, <toolchain>-g++, and <toolchain>-gcc to icecc from within that directory. The above PATH will then work.

This is only desirable if you plan on doing any manual compiling on the terminal. If you're using portage, leave this out of the environment!

== Start Icecream ==
It is extremely important to make sure icecream is started on the selected scheduler machine, or no icecream machine will be able to distribute compile jobs.

On most systems, icecream can be started by simply running:
{{Command|<nowiki>/etc/init.d/icecream start</nowiki>}}
This can vary by distribution.

That's all there is! If you configured PATH correctly as described previously, simply executing "gcc" will work with both ccache and icecc simultaneously.

== Emerge wrapper script ==
Instead of manipulating /etc/make.conf each time you want to use icecream (and vice versa) you can simply use following script. I acts as a wrapper of emerge and starts 
the icecream daemon (if available and not running). Every option passed to it gets passed over to emerge but emerge runs with different envirinment variables.
{{File|ice-emerge|<pre>#!/bin/bash
# Copyright 2010 Neuvoo Developer
# Distributed under the terms of the GNU General Public License v2
# Author: bearsh

PARMAKE="10"

if [ -e /lib/rc/sh/functions.sh ]; then
        source /lib/rc/sh/functions.sh
elif [ -e /sbin/functions.sh ]; then
        source /sbin/functions.sh
else
        echo "Script supposed to be launched into Gentoo Linux system with openrc/baselayout"
        exit 1;
fi

#check if icecream is installed
if [[ ! -e "/usr/bin/icecc" ]]
then
    einfo "Could not find icecream installed on you system"
    einfo "run emerge sys-devel/icecream"
    einfo "additional informations can be found here:"
    einfo "  http://neuvoo.org/wiki/index.php?title=Icecream"
    exit 1
fi

# check if icecream is running
if [[ $(/etc/init.d/icecream status | grep "stopped") ]]
then
    einfo "Icecream daemon not yet running, starting it..."
    /etc/init.d/icecream start || exit 1
fi

# check if ICECC_VERSION is set
if [[ ! ${ICECC_VERSION} ]]
then
    ewarn "The ICECC_VERSION environment variable has not been set, icecream may not work properly"
    einfo "for further information see http://neuvoo.org/wiki/index.php?title=Icecream"
fi

export PREROOTPATH="/usr/lib/ccache/bin:/usr/lib/icecc/bin:$(portageq envvar PREROOTPATH)"
export MAKEOPTS="$(portageq envvar MAKEOPTS | sed -e s/j[0-9]/j${PARMAKE}/)"

# call emerge
exec emerge "$@"</pre>}}

== Further Reading ==
The icecream homepage is a wiki. Visit it if you're curious for even more icecream facts: http://en.opensuse.org/Icecream
